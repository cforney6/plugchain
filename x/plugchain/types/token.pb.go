// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onp/plugchain/v1/token.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateToken struct {
	Symbol         string                                  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OriginalSymbol string                                  `protobuf:"bytes,2,opt,name=original_symbol,json=originalSymbol,proto3" json:"original_symbol,omitempty"`
	Description    string                                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	WholeName      string                                  `protobuf:"bytes,4,opt,name=whole_name,json=wholeName,proto3" json:"whole_name,omitempty"`
	TotalSupply    *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=total_supply,json=totalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_supply,omitempty"`
	Owner          string                                  `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Founder        string                                  `protobuf:"bytes,7,opt,name=founder,proto3" json:"founder,omitempty"`
	Decimal        uint64                                  `protobuf:"varint,8,opt,name=decimal,proto3" json:"decimal,omitempty"`
	Mintable       bool                                    `protobuf:"varint,9,opt,name=mintable,proto3" json:"mintable,omitempty"`
}

func (m *MsgCreateToken) Reset()         { *m = MsgCreateToken{} }
func (m *MsgCreateToken) String() string { return proto.CompactTextString(m) }
func (*MsgCreateToken) ProtoMessage()    {}
func (*MsgCreateToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_95af6a14d7d02623, []int{0}
}
func (m *MsgCreateToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateToken.Merge(m, src)
}
func (m *MsgCreateToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateToken proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateToken)(nil), "onp.plugchain.v1.MsgCreateToken")
}

func init() { proto.RegisterFile("onp/plugchain/v1/token.proto", fileDescriptor_95af6a14d7d02623) }

var fileDescriptor_95af6a14d7d02623 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x6b, 0xb6, 0x75, 0xad, 0x3b, 0x0a, 0xb2, 0x26, 0x64, 0x4d, 0x28, 0xa9, 0x38, 0xa0,
	0x1e, 0x20, 0xd1, 0xc4, 0x89, 0x1f, 0xa7, 0x71, 0xe2, 0xc0, 0x40, 0xd9, 0x04, 0x12, 0x42, 0x9a,
	0xdc, 0xd4, 0xa4, 0x56, 0x1d, 0x3f, 0xcb, 0x71, 0x16, 0xfa, 0x17, 0xc0, 0x91, 0x23, 0xc7, 0xfe,
	0x39, 0x1c, 0x77, 0x44, 0x1c, 0x22, 0x94, 0x5e, 0xf8, 0x33, 0x90, 0xbd, 0x74, 0x84, 0x93, 0xdf,
	0xe7, 0x7d, 0xbf, 0xfa, 0xea, 0x3d, 0x3d, 0xe3, 0xfb, 0xa0, 0x74, 0xac, 0x65, 0x99, 0xa5, 0x0b,
	0x26, 0x54, 0x7c, 0x79, 0x1c, 0x5b, 0x58, 0x72, 0x15, 0x69, 0x03, 0x16, 0xc8, 0x5d, 0x50, 0x3a,
	0xba, 0x51, 0xa3, 0xcb, 0xe3, 0xa3, 0xc3, 0x0c, 0x32, 0xf0, 0x62, 0xec, 0xaa, 0x6b, 0xdf, 0x83,
	0x2f, 0x3b, 0x78, 0xfc, 0xba, 0xc8, 0x5e, 0x1a, 0xce, 0x2c, 0x3f, 0x77, 0x01, 0xe4, 0x1e, 0xee,
	0x17, 0xab, 0x7c, 0x06, 0x92, 0xa2, 0x09, 0x9a, 0x0e, 0x93, 0x96, 0xc8, 0x73, 0x7c, 0x07, 0x8c,
	0xc8, 0x84, 0x62, 0xf2, 0xa2, 0x35, 0xdc, 0x72, 0x86, 0x13, 0xd2, 0xd4, 0xe1, 0xf8, 0x4d, 0x2b,
	0x9d, 0x79, 0x25, 0x19, 0xc3, 0x7f, 0x4c, 0x26, 0x78, 0x34, 0xe7, 0x45, 0x6a, 0x84, 0xb6, 0x02,
	0x14, 0xdd, 0xf1, 0xc9, 0xdd, 0x16, 0x79, 0x84, 0x71, 0xb5, 0x00, 0xc9, 0x2f, 0x14, 0xcb, 0x39,
	0xdd, 0xf5, 0xc9, 0xb7, 0x9b, 0x3a, 0x1c, 0xbe, 0x77, 0xdd, 0x53, 0x96, 0xf3, 0x64, 0x58, 0x6d,
	0x4b, 0xf2, 0x11, 0x1f, 0x58, 0xb0, 0x6e, 0x92, 0x52, 0x6b, 0xb9, 0xa2, 0x7b, 0xde, 0xff, 0xf4,
	0x57, 0x1d, 0x3e, 0xcc, 0x84, 0x5d, 0x94, 0xb3, 0x28, 0x85, 0x3c, 0x4e, 0xa1, 0xc8, 0xa1, 0x68,
	0x9f, 0xc7, 0xc5, 0x7c, 0x19, 0xdb, 0x95, 0xe6, 0x45, 0xf4, 0x4a, 0xd9, 0xa6, 0x0e, 0x47, 0xe7,
	0x2e, 0xe1, 0xcc, 0x07, 0x24, 0x23, 0xfb, 0x0f, 0xc8, 0x21, 0xde, 0x83, 0x4a, 0x71, 0x43, 0xfb,
	0x7e, 0xce, 0x6b, 0x20, 0x14, 0xef, 0x7f, 0x82, 0x52, 0xcd, 0xb9, 0xa1, 0xfb, 0xbe, 0xbf, 0x45,
	0xa7, 0xcc, 0x79, 0x2a, 0x72, 0x26, 0xe9, 0x60, 0x82, 0xa6, 0xbb, 0xc9, 0x16, 0xc9, 0x11, 0x1e,
	0xe4, 0x42, 0x59, 0x36, 0x93, 0x9c, 0x0e, 0x27, 0x68, 0x3a, 0x48, 0x6e, 0xf8, 0xd9, 0xc1, 0xd7,
	0x75, 0xd8, 0xfb, 0xbe, 0x0e, 0xd1, 0x9f, 0x75, 0x88, 0x4e, 0xde, 0xfd, 0x68, 0x02, 0x74, 0xd5,
	0x04, 0xe8, 0x77, 0x13, 0xa0, 0x6f, 0x9b, 0xa0, 0x77, 0xb5, 0x09, 0x7a, 0x3f, 0x37, 0x41, 0xef,
	0xc3, 0x8b, 0xce, 0x46, 0x60, 0x58, 0x2a, 0xf9, 0x29, 0xb7, 0x15, 0x98, 0xe5, 0x5b, 0x77, 0xc2,
	0x14, 0x64, 0xe7, 0x1b, 0x7c, 0xee, 0xd4, 0x7e, 0xd7, 0x59, 0xdf, 0x1f, 0xfa, 0xc9, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x62, 0x07, 0xce, 0x5a, 0x30, 0x02, 0x00, 0x00,
}

func (this *MsgCreateToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateToken)
	if !ok {
		that2, ok := that.(MsgCreateToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.OriginalSymbol != that1.OriginalSymbol {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.WholeName != that1.WholeName {
		return false
	}
	if that1.TotalSupply == nil {
		if this.TotalSupply != nil {
			return false
		}
	} else if !this.TotalSupply.Equal(*that1.TotalSupply) {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Founder != that1.Founder {
		return false
	}
	if this.Decimal != that1.Decimal {
		return false
	}
	if this.Mintable != that1.Mintable {
		return false
	}
	return true
}
func (m *MsgCreateToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mintable {
		i--
		if m.Mintable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Decimal != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Founder) > 0 {
		i -= len(m.Founder)
		copy(dAtA[i:], m.Founder)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Founder)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if m.TotalSupply != nil {
		{
			size := m.TotalSupply.Size()
			i -= size
			if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WholeName) > 0 {
		i -= len(m.WholeName)
		copy(dAtA[i:], m.WholeName)
		i = encodeVarintToken(dAtA, i, uint64(len(m.WholeName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalSymbol) > 0 {
		i -= len(m.OriginalSymbol)
		copy(dAtA[i:], m.OriginalSymbol)
		i = encodeVarintToken(dAtA, i, uint64(len(m.OriginalSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.OriginalSymbol)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.WholeName)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.TotalSupply != nil {
		l = m.TotalSupply.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Founder)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovToken(uint64(m.Decimal))
	}
	if m.Mintable {
		n += 2
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WholeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WholeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.TotalSupply = &v
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Founder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Founder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mintable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mintable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
