syntax = "proto3";
package plugchain.nft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "nft/nft.proto";

option go_package = "github.com/oracleNetworkProtocol/plugchain/x/nft/types";

// Query defines the gRPC querier service.
service Query {
    rpc Denom (QueryDenomRequest) returns (QueryDenomResponse) {
        option (google.api.http).get = "/nft/denoms/{denom_id}";
    };

    rpc Denoms (QueryDenomsRequest) returns (QueryDenomsResponse) {
        option (google.api.http).get = "/nft/denoms";
    }
    rpc NFT (QueryNFTRequest) returns (QueryNFTResponse) {
        option (google.api.http).get = "/nft/nfts/{denom_id}/{nft_id}";
    }
    rpc Collection (QueryCollectionRequest) returns (QueryCollectionResponse) {
        option (google.api.http).get = "/nft/collections/{denom_id}";
    }

    rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
        option (google.api.http).get = "/nft/collections/{denom_id}/supply";
    }
    rpc Owner (QueryOwnerRequest) returns (QueryOwnerResponse) {
        option (google.api.http).get = "/nft/nfts/{address}/{denom_id}";
    }
}


message QueryDenomRequest {
    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
}

message QueryDenomResponse {
    Denom denom = 1 ;
}

message QueryDenomsRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryDenomsResponse{
    repeated Denom denoms = 1 [ (gogoproto.nullable) = false ];
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNFTRequest {
    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string nft_id = 2 [ (gogoproto.moretags) = "yaml:\"nft_id\"" ];
}

message QueryNFTResponse{
    NFT nft = 1; 
}

message QueryCollectionRequest {
    string denom_id = 1;
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}


message QueryCollectionResponse{
    Collection collection = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QuerySupplyRequest {
    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
}

message QuerySupplyResponse {
    uint64 amount = 1;
}

message QueryOwnerRequest  {
    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string address = 2; 
    cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryOwnerResponse {
    Owner owner = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}