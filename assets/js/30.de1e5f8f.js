(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{458:function(e,a,t){"use strict";t.r(a);var o=t(57),r=Object(o.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"general-concepts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-concepts"}},[e._v("#")]),e._v(" General Concepts")]),e._v(" "),t("h2",{attrs:{id:"plug-chain-hub-node-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plug-chain-hub-node-types"}},[e._v("#")]),e._v(" Plug Chain Hub Node Types")]),e._v(" "),t("h3",{attrs:{id:"full-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-node"}},[e._v("#")]),e._v(" Full Node")]),e._v(" "),t("p",[e._v("A full-node is a program that fully validates transactions and blocks of a blockchain. It is distinct from a light-node that only processes block headers and a small subset of transactions. Running a full-node requires more resources than a light-node but is necessary in order to be a validator. In practice, running a full-node only implies running a non-compromised and up-to-date version of the software with low network latency and without downtime.")]),e._v(" "),t("h3",{attrs:{id:"validator-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validator-node"}},[e._v("#")]),e._v(" Validator Node")]),e._v(" "),t("p",[e._v("The "),t("RouterLink",{attrs:{to:"/get-started/intro.html#plugchaind-hub"}},[e._v("Plug Chain Hub")]),e._v(" is based on "),t("a",{attrs:{href:"https://cosmos.network/docs/intro/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cosmos SDK"),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://tendermint.com/docs/introduction/what-is-tendermint.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint"),t("OutboundLink")],1),e._v(", which relies on a set of validators to secure the network. The role of validators is to run a full-node and participate in consensus by broadcasting votes which contain cryptographic signatures signed by their private keys. Validators commit new blocks to the blockchain and receive revenue in exchange for their work. They must also participate in governance by voting on proposals. Validators are weighted according to their total stake.")],1),e._v(" "),t("h3",{attrs:{id:"validator-candidate-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validator-candidate-node"}},[e._v("#")]),e._v(" Validator Candidate Node")]),e._v(" "),t("p",[e._v("Only top 100 bonded full nodes can become validator nodes, the rest will become candidates. The situation will change as delegation amount changes.")]),e._v(" "),t("h2",{attrs:{id:"plug-chain-hub-user-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plug-chain-hub-user-types"}},[e._v("#")]),e._v(" Plug Chain Hub User Types")]),e._v(" "),t("h3",{attrs:{id:"validator-operator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validator-operator"}},[e._v("#")]),e._v(" Validator Operator")]),e._v(" "),t("p",[e._v("A validator operator is the only one who can operate the Validator's informations or participate in governance as the validator.")]),e._v(" "),t("h3",{attrs:{id:"delegator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delegator"}},[e._v("#")]),e._v(" Delegator")]),e._v(" "),t("p",[e._v("Delegators are plugchaind holders who cannot, or do not want to run a validator themselves. plugchaind holders can delegate plugchaind to a validator and obtain a part of their revenue in exchange. They can earn as much as the validators and only need to pay some commission.")]),e._v(" "),t("h3",{attrs:{id:"profiler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profiler"}},[e._v("#")]),e._v(" Profiler")]),e._v(" "),t("p",[e._v("Profiler is a special type of user who can submit software upgrade/halt proposals")]),e._v(" "),t("h3",{attrs:{id:"trustee"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trustee"}},[e._v("#")]),e._v(" Trustee")]),e._v(" "),t("p",[e._v("Trustee is a special type of user who will receive funds from CommunityTaxUsage proposals")]),e._v(" "),t("h2",{attrs:{id:"plugchaind-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-token"}},[e._v("#")]),e._v(" plugchaind Token")]),e._v(" "),t("p",[e._v("The Plug Chain Hub has its own native token known as "),t("em",[e._v("plug")]),e._v(".  It is designed to serve three purposes in the network.")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Staking.")]),e._v(" Similar to the ATOM token in the Cosmos Hub, the plugchaind token will be used as a staking token to secure the PoS blockchain.")]),e._v(" "),t("li",[t("strong",[e._v("Transaction Fee.")]),e._v(" The plugchaind token will also be used to pay fees for all transactions in the plugchaind network.")]),e._v(" "),t("li",[t("strong",[e._v("Service Fee.")]),e._v(" It is required that service providers in the plugchaind network charge service fees denominated in the plugchaind token.")])]),e._v(" "),t("p",[e._v("It is intended that the plugchaind network will eventually support all whitelisted fee tokens from the Cosmos network, which can be used to pay the transaction fees and service fees.")]),e._v(" "),t("h2",{attrs:{id:"staking-rewards"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#staking-rewards"}},[e._v("#")]),e._v(" Staking Rewards")]),e._v(" "),t("p",[e._v("The validator and its delegators can share the following rewards by proportion:")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Block Inflation")])]),e._v(" "),t("p",[e._v("Block Inflation exists to incentivize plugchaind holders to stake. The more staked plugchaind tokens are, more secure the network become(Read more about "),t("RouterLink",{attrs:{to:"/features/staking.html"}},[e._v("Staking")]),e._v(").")],1),e._v(" "),t("p",[e._v("Block Inflation will be "),t("RouterLink",{attrs:{to:"/features/mint.html"}},[e._v("distributed every block")]),e._v(". The inflation rate of Plug Chain has been changing, ranging from 7% to 20%")],1)]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Block Proposer Reward")])]),e._v(" "),t("p",[e._v("In Plug Chain Hub, the probability for being a proposer is proportional to the validator's bonded tokens. If one proposed block is finalized, the proposer gets extra rewards for it.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Fee")])]),e._v(" "),t("p",[e._v("Various transactions in the uplugcn network need to pay a certain fee. Plug Chain Hub sets the minimum unit price of Gas (ie min-gas-price) in the system.")]),e._v(" "),t("p",[e._v("Handling fees can only be paid using uplugcn at present. In the future, a whitelist of handling fees may be maintained through on-chain governance. Any token in the whitelist can be used to pay for handling fees.")]),e._v(" "),t("p",[e._v("The fee income will be distributed according to the weight of the validator.")])])]),e._v(" "),t("h3",{attrs:{id:"staking-rewards-calculation-formula"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#staking-rewards-calculation-formula"}},[e._v("#")]),e._v(" Staking Rewards Calculation Formula")]),e._v(" "),t("p",[e._v("The following formulas are based on the current "),t("RouterLink",{attrs:{to:"/concepts/gov-params.html"}},[e._v("Plug Chain Hub Mainnet Params")]),e._v(".")],1),e._v(" "),t("h4",{attrs:{id:"annual-rewards-ignore-proposer-rewards-and-fees"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#annual-rewards-ignore-proposer-rewards-and-fees"}},[e._v("#")]),e._v(" Annual Rewards (ignore proposer rewards and fees)")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("AnnualInflation =")]),e._v(" "),t("code",[e._v("Base * InflationRate")]),e._v(" (aka 15.989 billion * 13% = 207857 million plug)")]),e._v(" "),t("li",[t("strong",[e._v("ValidatorRewards =")]),e._v(" "),t("code",[e._v("(AnnualInflation / BondedTokens) * (1 - CommunityTax) * (ValidatorSelfDelegation + DelegatorsDelegation * ValidatorCommissionRate)")])]),e._v(" "),t("li",[t("strong",[e._v("DelegatorRewards =")]),e._v(" "),t("code",[e._v("(AnnualInflation / BondedTokens) * (1 - CommunityTax) * DelegatorSelfDelegation * (1 - ValidatorCommissionRate)")])])]),e._v(" "),t("h4",{attrs:{id:"block-rewards"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block-rewards"}},[e._v("#")]),e._v(" Block Rewards")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("BlockInflation =")]),e._v(" "),t("code",[e._v("AnnualInflation / (365*24*60*12)")]),e._v(" (aka 329.555  plug)")]),e._v(" "),t("li",[t("strong",[e._v("ProposerExtraRewards =")]),e._v(" "),t("code",[e._v("(BaseProposerReward + BonusProposerReward * PrecommitPower/TotalVotingPower) * (BlockInflation + BlockCollectedFees)")])]),e._v(" "),t("li",[t("strong",[e._v("BlockRewards =")]),e._v(" "),t("code",[e._v("(BlockInflation + BlockCollectedFees) * (1 - CommunityTax) - ProposerExtraRewards")])]),e._v(" "),t("li",[t("strong",[e._v("ValidatorTotalRewards =")]),e._v(" "),t("ul",[t("li",[e._v("Non-Proposer: "),t("code",[e._v("(BlockRewards / BondedTokens) * ValidatorBondedTokens")])]),e._v(" "),t("li",[e._v("Proposer: "),t("code",[e._v("NonProposerValidatorTotalRewards + ProposerExtraRewards")])])])]),e._v(" "),t("li",[t("strong",[e._v("Commission =")]),e._v(" "),t("code",[e._v("ValidatorTotalRewards * ValidatorCommissionRate")])]),e._v(" "),t("li",[t("strong",[e._v("ValidatorRewards =")]),e._v(" "),t("code",[e._v("ValidatorTotalRewards * (ValidatorSelfDelegation / ValidatorBondedTokens) + Commission")])]),e._v(" "),t("li",[t("strong",[e._v("DelegatorRewards =")]),e._v(" "),t("code",[e._v("(ValidatorTotalRewards - Commission) * (DelegatorSelfDelegation / ValidatorBondedTokens)")])])]),e._v(" "),t("h2",{attrs:{id:"validator-responsibilities"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validator-responsibilities"}},[e._v("#")]),e._v(" Validator Responsibilities")]),e._v(" "),t("p",[e._v("Validators have two main responsibilities:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Be able to constantly run a correct version of the software:")]),e._v(" Validators need to make sure that their servers are always online and their private keys are not compromised.")]),e._v(" "),t("li",[t("strong",[e._v("Actively participate in governance:")]),e._v(" Validators are required to vote on every proposal.")])]),e._v(" "),t("p",[e._v("Additionally, validators are expected to be active members of the community. They should always be up-to-date with the current state of the ecosystem so that they can easily adapt to any change.")]),e._v(" "),t("h2",{attrs:{id:"validator-risks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validator-risks"}},[e._v("#")]),e._v(" Validator Risks")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Unavailability")]),e._v(": Validators are expected to keep signing votes for making new blocks. If a validator's signature has not been included in more than 30% of the last 34,560 blocks (which amounts to approximately 48 hours, assuming an average block-generating time of 5 seconds), this validator will get jailed and removed from current validatorset for 10 minutes, and their bonded tokens will get slashed by 1%.")]),e._v(" "),t("li",[t("strong",[e._v("Double Sign")]),e._v(": If the protocol detects that a validator voted multiple different opinions about the same block (same height/round), or voted for different blocks at the same height/round, this validator will get jailed and removed from current validatorset for 2 days. Their bonded tokens will get slashed by 5%.\n")])]),e._v(" "),t("p",[e._v("All metrics mentioned can be adjusted by "),t("code",[e._v("parameter-change")]),e._v(" proposals.")])])}),[],!1,null,null,null);a.default=r.exports}}]);